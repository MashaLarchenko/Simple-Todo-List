{"version":3,"sources":["context.js","Loader.js","Modal/Modal.js","ToDo/ToDoItem.js","ToDo/ToDoList.js","ToDo/Container.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","Component","style","display","justifyContent","margin","className","styles","li","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","ToDoItem","todo","index","onChange","draggingEv","removeToDo","useContext","classes","colorDrag","completed","push","join","id","title","onClick","bind","column","ul","listStyle","ToDoList","props","todos","map","draggableId","toString","key","provided","snapshot","isDragging","ref","innerRef","draggableProps","dragHandleProps","onToggle","dragItem","placeholder","Container","columns","loading","useState","newColumns","setColumns","newTodos","setTodos","onDragStart","ev","document","querySelector","color","onDragEnd","result","destination","source","droppableId","sourceColumn","filter","startColumn","endColumn","newTasksIds","tasksIds","splice","newColData","forEach","newStartTasksIds","newStartColData","newEndTasksIds","newEndColData","tasks","idTask","Fragment","length","draggingEvOver","isDraggingOver","droppableProps","AddToDo","lazy","App","columnOrder","Provider","value","columnId","delEl","indexOf","Loader","Suspense","fallback","onCreate","concat","includes","taskColumnName","newTaskiD","addTaskToColumn","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8ade4192.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst Context = React.createContext();\r\n\r\nexport default Context","import React, { useState } from \"react\";\r\n\r\nexport default () => <div style={{display:'flex', justifyContent:'center', margin:'.5rem'}}> <div className=\"lds-dual-ring\"></div></div>","import React from \"react\";\r\nimport \"./Modal.css\";\r\n\r\nexport default class Modal extends React.Component {\r\n state = {\r\n     isOpen: false\r\n }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <button onClick={()=> this.setState({isOpen:true})}>Open modal</button>\r\n\r\n       {this.state.isOpen &&\r\n           <div className=\"modal\">\r\n          <div className=\"modal-body\">\r\n            <h1>Modal title</h1>\r\n            <p>mODAL</p>\r\n            <button onClick={()=> this.setState({isOpen:false})}>Close modal</button>\r\n          </div>\r\n        </div> \r\n       }\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Context from \"../context\";\r\n\r\nconst styles = {\r\n  li: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"1px solid #ccc\",\r\n    borderRadius: \"4px\",\r\n    marginBottom: \".5rem\",\r\n  },\r\n  input: {\r\n    marginRight: \"1rem\"\r\n  }\r\n};\r\n\r\n\r\nfunction ToDoItem({ todo, index, onChange, draggingEv }) {\r\n\r\n    const { removeToDo } = useContext(Context)\r\n    const classes = ['listItem'];\r\n    const colorDrag = ['todoItem', draggingEv]\r\n\r\n\r\n    if(todo.completed) {\r\n        classes.push('done')\r\n    }\r\n  return (\r\n       <li className={colorDrag.join(' ')} >\r\n      <span className={classes.join(' ')} style={styles.input}\r\n          onChange={() => onChange(todo.id)}>\r\n        <strong>{index}</strong>\r\n        &nbsp;\r\n        {todo.title}\r\n      </span>\r\n      <button className=\"rm\" onClick={removeToDo.bind(null, todo.id, todo.column)}>&times;</button>\r\n    </li>\r\n  );\r\n}\r\n\r\nToDoItem.propTypes = {\r\n  todo: PropTypes.object.isRequired,\r\n  index: PropTypes.number,\r\n  onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ToDoItem;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ToDoItem from \"./ToDoItem\";\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\n\r\nconst styles = {\r\n  ul: {\r\n    listStyle: \"none\",\r\n    margin: 0,\r\n    padding: 0,\r\n    // height: \"100%\"\r\n  }\r\n};\r\n\r\nfunction ToDoList(props) {\r\n  // const colorDragOver = props.draggingEvOver;\r\n\r\n  return (\r\n    <ul style={styles.ul} >\r\n      <h2>{props.title}</h2>\r\n      {props.todos.map((todo, index) => {\r\n        return (\r\n          <Draggable\r\n            draggableId={todo.id.toString()}\r\n            key={todo.id}\r\n            index={index}\r\n          >\r\n            {(provided, snapshot) => {\r\n              let draggingEv = \"\";\r\n              if (snapshot.isDragging) {\r\n                draggingEv = \"onDrag\";\r\n              }\r\n              return (\r\n                <div\r\n                  ref={provided.innerRef}\r\n                  {...provided.draggableProps}\r\n                  {...provided.dragHandleProps}\r\n                  isDragging={snapshot.isDragging}\r\n                >\r\n                  <ToDoItem\r\n                    todo={todo}\r\n                    index={index + 1}\r\n                    key={todo.id}\r\n                    onChange={props.onToggle}\r\n                    style={styles.dragItem}\r\n                    draggingEv={draggingEv}\r\n                  />\r\n                  {provided.placeholder}\r\n                </div>\r\n              );\r\n            }}\r\n          </Draggable>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nToDoList.propTypes = {\r\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onToggle: PropTypes.func.isRequired\r\n};\r\n\r\nexport default ToDoList;\r\n","import React, { useState } from \"react\";\r\nimport ToDoList from \"./ToDoList\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\nimport { Droppable } from \"react-beautiful-dnd\";\r\n\r\nexport default function Container({ columns, todos, onToggle, loading }) {\r\n  const [newColumns, setColumns] = useState(columns);\r\n  const [newTodos, setTodos] = useState(todos);\r\n\r\n  function onDragEnd(result) {\r\n    const { destination, source, draggableId } = result;\r\n    if (!destination) {\r\n      return;\r\n    }\r\n\r\n    if (\r\n      destination.droppableId === source.droppableId &&\r\n      destination.index === source.index\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const sourceColumn = newColumns.filter(\r\n      column => column.id === source.droppableId\r\n    );\r\n\r\n    const startColumn = sourceColumn;\r\n    const endColumn = newColumns.filter(\r\n      column => column.id === destination.droppableId\r\n    );\r\n\r\n    if (startColumn[0].id === endColumn[0].id) {\r\n      const newTasksIds = sourceColumn[0].tasksIds;\r\n      newTasksIds.splice(source.index, 1);\r\n      newTasksIds.splice(destination.index, 0, +draggableId);\r\n      sourceColumn[0].tasksIds = newTasksIds;\r\n      let newColData = [];\r\n      newColumns.forEach(column => {\r\n        if (column.id === sourceColumn[0].id) {\r\n          newColData.push(sourceColumn[0]);\r\n        } else {\r\n          newColData.push(column);\r\n        }\r\n        setColumns(newColData);\r\n        return;\r\n      });\r\n    } else {\r\n      const newStartTasksIds = startColumn[0].tasksIds;\r\n      newStartTasksIds.splice(source.index, 1);\r\n      startColumn[0].tasksIds = newStartTasksIds;\r\n      let newStartColData = [];\r\n      newColumns.forEach(column => {\r\n        if (column.id === startColumn[0].id) {\r\n          newStartColData.push(startColumn[0]);\r\n        } else {\r\n          newStartColData.push(column);\r\n        }\r\n        setColumns(newStartColData);\r\n      });\r\n\r\n      const newEndTasksIds = endColumn[0].tasksIds;\r\n      newEndTasksIds.splice(destination.index, 0, +draggableId);\r\n      endColumn[0].tasksIds = newEndTasksIds;\r\n      let newEndColData = [];\r\n      newColumns.forEach(column => {\r\n        if (column.id === endColumn[0].id) {\r\n          newEndColData.push(endColumn[0]);\r\n        } else {\r\n          newEndColData.push(column);\r\n        }\r\n        setColumns(newEndColData);\r\n        setTodos(\r\n          newTodos.map(todo => {\r\n            if (todo.id === +draggableId) {\r\n              todo.column = destination.droppableId;\r\n            }\r\n            return todo;\r\n          })\r\n        );\r\n      });\r\n    }\r\n    const listItem = document.querySelector(\".listItem\");\r\n    listItem.style.color = \"black\";\r\n  }\r\n\r\n  function onDragStart(ev) {\r\n    const listItem = document.querySelector(\".listItem\");\r\n    listItem.style.color = \"orange\";\r\n  }\r\n\r\n  return (\r\n    <DragDropContext onDragStart={onDragStart} onDragEnd={onDragEnd}>\r\n      <div className=\"columnContainer\">\r\n        {newColumns.map(column => {\r\n          const tasks = [];\r\n          const classes = [\"columnItem\"];\r\n          classes.push(column.id);\r\n          column.tasksIds.map(idTask =>\r\n            todos.forEach(todo => {\r\n              return todo.id === idTask ? tasks.push(todo) : null;\r\n            })\r\n          );\r\n          return (\r\n            <React.Fragment key={column.id}>\r\n              {tasks.length ? (\r\n                <Droppable droppableId={column.id}>\r\n                  {(provided, snapshot) => {\r\n                    let draggingEvOver = [\"listContainer\"];\r\n                    if (snapshot.isDraggingOver) {\r\n                      draggingEvOver.push(\"onDragOver\");\r\n                    }\r\n                    return (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        isDraggingOver={snapshot.isDraggingOver}\r\n                        className={draggingEvOver.join(' ')}\r\n                      >\r\n                        <ToDoList\r\n                          todos={tasks}\r\n                          onToggle={onToggle}\r\n                          title={column.title}\r\n                          tasks={column.tasks}\r\n                          className={classes.join(\" \")}\r\n                          draggingEvOver={draggingEvOver}\r\n                        />\r\n                        {provided.placeholder}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                </Droppable>\r\n              ) : loading ? null : (\r\n                <Droppable droppableId={column.id}>\r\n                  {(provided, snapshot) => {\r\n                    let draggingEvOver = [\"listContainer\"];\r\n\r\n                    if (snapshot.isDraggingOver) {\r\n                      draggingEvOver.push(\"onDragOver\");\r\n                    }\r\n                    return (\r\n                      <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.droppableProps}\r\n                        isDraggingOver={snapshot.isDraggingOver}\r\n                        className={draggingEvOver.join(\" \")}\r\n                      >\r\n                        <h2>{column.title}</h2>\r\n                        <p>No todos</p>\r\n                        {provided.placeholder}\r\n                      </div>\r\n                    );\r\n                  }}\r\n                </Droppable>\r\n              )}\r\n            </React.Fragment>\r\n          );\r\n        })}\r\n      </div>\r\n    </DragDropContext>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Modal from \"./Modal/Modal\";\r\nimport Loader from \"./Loader\";\r\nimport Context from \"./context\";\r\nimport Container from \"./ToDo/Container\";\r\n\r\nconst AddToDo = React.lazy(() => import(\"./ToDo/AddToDo\"));\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = React.useState([\r\n    { id: 1, completed: false, title: \"Buy milk\", column: \"toDo\" },\r\n    { id: 2, completed: false, title: \"Buy coffee\", column: \"toDo\" }\r\n  ]);\r\n\r\n  const [loading, setLoading] = React.useState(false);\r\n\r\n  const [columns, setColumns] = React.useState([\r\n    {\r\n      id: \"toDo\",\r\n      title: \"To Do\",\r\n      tasksIds: [1, 2],\r\n      columnOrder: 1\r\n    },\r\n    {\r\n      id: \"inProgress\",\r\n      title: \"In Progress\",\r\n      tasksIds: [],\r\n      columnOrder: 2\r\n    },\r\n    {\r\n      id: \"doneTodo\",\r\n      title: \"Done\",\r\n      tasksIds: [],\r\n      columnOrder: 3\r\n    }\r\n  ]);\r\n\r\n  function toggleToDo(id) {\r\n    setTodos(\r\n      todos.map(todo => {\r\n        if (todo.id === id) {\r\n          todo.completed = !todo.completed;\r\n        }\r\n        return todo;\r\n      })\r\n    );\r\n  }\r\n\r\n  function removeToDo(id, columnId) {\r\n    setTodos(todos.filter(todo => todo.id !== id));\r\n\r\n    columns.map(column => {\r\n      const delEl = column.tasksIds.indexOf(id);\r\n      if (column.id === columnId) {\r\n        column.tasksIds.splice(delEl, 1);\r\n      }\r\n      return column;\r\n    });\r\n    setColumns(columns);\r\n  }\r\n\r\n  function addTaskToColumn() {\r\n    if (todos.length && !todos.includes(todos[todos.length - 1].id)) {\r\n      const taskColumnName = todos[todos.length - 1].column;\r\n      const newTaskiD = todos[todos.length - 1].id;\r\n      columns.forEach(column => {\r\n        if (\r\n          column.id === taskColumnName &&\r\n          !column.tasksIds.includes(newTaskiD)\r\n        ) {\r\n          column.tasksIds.push(newTaskiD);\r\n        }\r\n      });\r\n    }\r\n\r\n    return setColumns(columns);\r\n  }\r\n\r\n  function addTodo(title) {\r\n    setTodos(\r\n      todos.concat([\r\n        {\r\n          title,\r\n          id: todos.length + 1,\r\n          completed: false,\r\n          column: \"toDo\"\r\n        }\r\n      ])\r\n    );\r\n    columns.forEach(column => {\r\n      if (column.id === \"toDo\") {\r\n        column.tasksIds.push(todos.length + 1);\r\n      }\r\n    });\r\n    addTaskToColumn();\r\n  }\r\n\r\n  return (\r\n    <Context.Provider value={{ removeToDo }}>\r\n      <div className=\"wrapper\">\r\n        <div className='header'>\r\n                  <h1>To Do List</h1>\r\n        </div>\r\n        {loading && <Loader />}\r\n        {/* <Modal></Modal> */}\r\n        <React.Suspense fallback={<p>Loading...</p>}>\r\n          <AddToDo onCreate={addTodo} />\r\n        </React.Suspense>\r\n        <Container\r\n          columns={columns}\r\n          onToggle={toggleToDo}\r\n          loading={loading}\r\n          todos={todos}\r\n          setTodos={setTodos}\r\n          setColumns={setColumns}\r\n        ></Container>\r\n      </div>\r\n    </Context.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}